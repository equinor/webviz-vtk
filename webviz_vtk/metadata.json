{
  "src/lib/dash/Algorithm.tsx": {
    "displayName": "Algorithm",
    "description": "Algorithm is exposing a source or filter to a downstream filter\nIt takes the following set of properties:\n  - vtkClass: vtkClassName\n  - state: {}",
    "props": {
      "id": {
        "description": "The ID used to identify this component.\n\n\nUnique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "port": {
        "description": "downstream connection port",
        "required": false,
        "defaultValue": {
          "value": "0",
          "computed": false
        },
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "vtkClass": {
        "description": "vtkClass name",
        "required": false,
        "defaultValue": {
          "value": "'vtkConeSource'",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "state": {
        "description": "set of property values for vtkClass",
        "required": false,
        "defaultValue": {
          "value": "{}",
          "computed": false
        },
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "children": {
        "description": "",
        "required": false,
        "type": {
          "name": "any",
          "raw": "any"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/lib/dash/CellData.tsx": {
    "displayName": "CellData",
    "description": "CellData is exposing a vtkCellData to a downstream element",
    "props": {
      "children": {
        "description": "",
        "required": false,
        "type": {
          "name": "any",
          "raw": "any"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/lib/dash/DataArray.tsx": {
    "displayName": "DataArray",
    "description": "DataArray is creating a vtkDataArray for the container fields\nIt takes the following set of properties:\n  - type: 'Float32Array', 'Float64Array', 'Uint16Array', ...\n  - values: [number, number, ...]\n  - numberOfComponents: 1,\n  - registration: 'addArray', 'setScalars', ...",
    "props": {
      "id": {
        "description": "Current color value\n\n\nUnique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "type": {
        "description": "Typed array name",
        "required": false,
        "defaultValue": {
          "value": "'Float32Array'",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "name": {
        "description": "Field name",
        "required": false,
        "defaultValue": {
          "value": "'scalars'",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "values": {
        "description": "Actual values to use inside our array",
        "required": false,
        "defaultValue": {
          "value": "[]",
          "computed": false
        },
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "numberOfComponents": {
        "description": "Number of components / Tuple size",
        "required": false,
        "defaultValue": {
          "value": "1",
          "computed": false
        },
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "registration": {
        "description": "Name of the method to call on the fieldData (addArray, setScalars, setVectors...)",
        "required": false,
        "defaultValue": {
          "value": "'addArray'",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/lib/dash/FieldData.tsx": {
    "displayName": "FieldData",
    "description": "FieldData is exposing a FieldData to a downstream element",
    "props": {
      "children": {
        "description": "",
        "required": false,
        "type": {
          "name": "any",
          "raw": "any"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/lib/dash/GeometryRepresentation.tsx": {
    "displayName": "GeometryRepresentation",
    "description": "GeometryRepresentation is responsible to convert a vtkPolyData into rendering\nIt takes the following set of properties:\n  - actor: Properties to assign to the vtkActor\n  - mapper: Properties to assign to the vtkMapper\n  - property: Properties to assign to the vtkProperty (actor.getProperty())\n  - colorMapPreset: Name of the preset to use for controlling the color mapping\n  - colorDataRange: Range to use for the color scale",
    "props": {
      "id": {
        "description": "The ID used to identify this component.\n\n\nUnique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "actor": {
        "description": "Properties to set to the actor",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "mapper": {
        "description": "Properties to set to the actor",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "property": {
        "description": "Properties to set to the actor.property",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "colorMapPreset": {
        "description": "Preset name for the lookup table color map",
        "required": false,
        "defaultValue": {
          "value": "'erdc_rainbow_bright'",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "colorDataRange": {
        "description": "Data range use for the colorMap",
        "required": false,
        "defaultValue": {
          "value": "[0, 1]",
          "computed": false
        },
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "showCubeAxes": {
        "description": "Show/Hide Cube Axes for the given representation",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "cubeAxesStyle": {
        "description": "Configure cube Axes style by overriding the set of properties defined\nhttps?://github.com/Kitware/vtk-js/blob/HEAD/Sources/Rendering/Core/CubeAxesActor/index.js#L703-L71;",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "showScalarBar": {
        "description": "Show hide scalar bar for that representation",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "scalarBarTitle": {
        "description": "Use given string as title for scalar bar. By default it is empty (no title).",
        "required": false,
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "scalarBarStyle": {
        "description": "Configure scalar bar style by overriding the set of properties defined\nhttps?://github.com/Kitware/vtk-js/blob/master/Sources/Rendering/Core/ScalarBarActor/index.js#L776-L79;",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "children": {
        "description": "",
        "required": false,
        "type": {
          "name": "any",
          "raw": "any"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/lib/dash/PointData.tsx": {
    "displayName": "PointData",
    "description": "PointData is exposing a vtkPointData to a downstream element",
    "props": {
      "children": {
        "description": "",
        "required": false,
        "type": {
          "name": "any",
          "raw": "any"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/lib/dash/PolyData.tsx": {
    "displayName": "PolyData",
    "description": "PolyData is exposing a vtkPolyData to a downstream filter\nIt takes the following set of properties:\n  - points: [x, y, z, x, y, z, ...],\n  - verts: [cellSize, pointId0, pointId1, ..., cellSize, pointId0, ...]\n  - lines: [cellSize, pointId0, pointId1, ..., cellSize, pointId0, ...]\n  - polys: [cellSize, pointId0, pointId1, ..., cellSize, pointId0, ...]\n  - strips: [cellSize, pointId0, pointId1, ..., cellSize, pointId0, ...]\nCell connectivity helper property:\n  - connectivity: 'manual', // [manual, points, triangles, strips]",
    "props": {
      "id": {
        "description": "Current color value\n\n\nUnique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "port": {
        "description": "downstream connection port",
        "required": false,
        "defaultValue": {
          "value": "0",
          "computed": false
        },
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "points": {
        "description": "xyz coordinates",
        "required": false,
        "defaultValue": {
          "value": "[]",
          "computed": false
        },
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "verts": {
        "description": "verts cells",
        "required": false,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "lines": {
        "description": "lines cells",
        "required": false,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "polys": {
        "description": "polys cells",
        "required": false,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "strips": {
        "description": "strips cells",
        "required": false,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "connectivity": {
        "description": "Type of connectivity `manual` or implicit such as `points`, `triangles`, `strips`",
        "required": false,
        "defaultValue": {
          "value": "'manual'",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "children": {
        "description": "",
        "required": false,
        "type": {
          "name": "any",
          "raw": "any"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/lib/dash/View.tsx": {
    "displayName": "View",
    "description": "View is responsible to render vtk.js data.\nIt takes the following set of properties:\n  - `background`: [0.2, 0.3, 0.4]\n  - `cameraPosition`: [0, 0, 1]\n  - `cameraViewUp`: [0, 1, 0]\n  - `cameraParallelProjection`: false\n  - `showOrientationAxes`: true",
    "props": {
      "id": {
        "description": "Current color value\n\n\nUnique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "style": {
        "description": "Allow user to override the default View style { width: '100%', height: '100%' }",
        "required": false,
        "defaultValue": {
          "value": "{\n    width: '100%',\n    height: '100%',\n  }",
          "computed": false
        },
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "className": {
        "description": "Allow user to provide custom className associated to root element",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "background": {
        "description": "The color of the view background using 3 floating numbers\nbetween 0-1 of Red, Green, Blue component.",
        "required": false,
        "defaultValue": {
          "value": "[0.2, 0.3, 0.4]",
          "computed": false
        },
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "interactorSettings": {
        "description": "Configure the interactions",
        "required": false,
        "defaultValue": {
          "value": "[\n    {\n      button: 1,\n      action: 'Rotate',\n    },\n    {\n      button: 2,\n      action: 'Pan',\n    },\n    {\n      button: 3,\n      action: 'Zoom',\n      scrollEnabled: true,\n    },\n    {\n      button: 1,\n      action: 'Pan',\n      shift: true,\n    },\n    {\n      button: 1,\n      action: 'Zoom',\n      alt: true,\n    },\n    {\n      button: 1,\n      action: 'ZoomToMouse',\n      control: true,\n    },\n    {\n      button: 1,\n      action: 'Roll',\n      alt: true,\n      shift: true,\n    },\n  ]",
          "computed": false
        },
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object",
            "raw": "object"
          },
          "raw": "object[]"
        }
      },
      "cameraPosition": {
        "description": "Initial camera position from an object in [0,0,0]",
        "required": false,
        "defaultValue": {
          "value": "[0, 0, 1]",
          "computed": false
        },
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "cameraViewUp": {
        "description": "Initial camera position from an object in [0,0,0]",
        "required": false,
        "defaultValue": {
          "value": "[0, 1, 0]",
          "computed": false
        },
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "cameraFocalPoint": {
        "description": "Initial camera focal point from an object in [0,0,0]",
        "required": false,
        "defaultValue": {
          "value": "[0, 0, 0]",
          "computed": false
        },
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number",
            "raw": "number"
          },
          "raw": "number[]"
        }
      },
      "autoResetCamera": {
        "description": "Whether to automatically call resetCamera() (default: true)\n\nWhen set to false, the user must explicitly provide camera\nproperties. Note that the initial resetCamera() call will\nstill occur upon component mount.",
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "cameraParallelProjection": {
        "description": "Use parallel projection (default?: false;",
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "cameraParallelHorScale": {
        "description": "Horizontal scaling used for parallel projection.\nHalf of the width of the viewport in world-coordinate distances",
        "required": false,
        "defaultValue": {
          "value": "1",
          "computed": false
        },
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "triggerRender": {
        "description": "Property use to trigger a render when changing.",
        "required": false,
        "defaultValue": {
          "value": "0",
          "computed": false
        },
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "triggerResetCamera": {
        "description": "Property use to trigger a resetCamera when changing.",
        "required": false,
        "defaultValue": {
          "value": "0",
          "computed": false
        },
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "pickingModes": {
        "description": "List of picking listeners to bind. The supported values are `click` and `hover`. By default it is disabled (empty array).",
        "required": false,
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "'click'",
                "computed": false
              },
              {
                "value": "'hover'",
                "computed": false
              },
              {
                "value": "'select'",
                "computed": false
              }
            ],
            "raw": "\"click\" | \"hover\" | \"select\""
          },
          "raw": "(\"click\" | \"hover\" | \"select\")[]"
        }
      },
      "clickInfo": {
        "description": "Read-only prop. To use this, make sure that `pickingModes` contains `click`.\nThis prop is updated when an element in the map is clicked. This contains\nthe picking info describing the object being clicked on.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "hoverInfo": {
        "description": "Read-only prop. To use this, make sure that `pickingModes` contains `hover`.\nThis prop is updated when an element in the map is hovered. This contains\nthe picking info describing the object being hovered.",
        "required": false,
        "type": {
          "name": "object",
          "raw": "object"
        }
      },
      "children": {
        "description": "List of representation to show",
        "required": false,
        "type": {
          "name": "any",
          "raw": "any"
        }
      },
      "showOrientationAxes": {
        "description": "Show/Hide orientation axes.",
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  }
}